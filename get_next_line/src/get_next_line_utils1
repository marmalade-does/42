#include "../includes/get_next_line.h"

/**
 * @brief Reads from a file descriptor and appends the content to the backup string.
 * 
 * @param backup The current backup string.
 * @param fd The file descriptor to read from.
 * @return A pointer to the updated backup string, or NULL if an error occurs.
 */
char	*append_backup(char *backup, int fd)
{
    char	buffer[BUFFER_SIZE + 1];
    char	*temp;
    int		red;

    red = 1;
    if (!backup)
        backup = ft_strdup("");
    while (red > 0)
    {
        red = read(fd, buffer, BUFFER_SIZE);
        buffer[red] = '\0';
        if (!backup)
            return (NULL);
        temp = ft_strjoin(backup, buffer);
        free(backup);
        if (!temp)
            return (NULL);
        backup = temp;
        if (ft_strchr(buffer, '\n'))
            break ;
    }
    if (red == -1)
        return (NULL);
    return (backup);
}

/**
 * @brief Extracts the line (up to and including the first newline) from the backup string.
 * 
 * @param backup The backup string.
 * @return A pointer to the newly allocated line, or NULL if allocation fails.
 */
char	*cut_line(char *backup)
{
    char	*line;
    int		i;

    if (backup == NULL)
        return (NULL);
    i = 0;
    while (backup[i] != '\0' && backup[i] != '\n')
        i++;
    line = ft_substr(backup, 0, i + 1);
    if (line == NULL)
        return (NULL);
    return (line);
}

/**
 * @brief Removes the extracted line from the backup string, leaving only the remaining content.
 * 
 * @param backup_unshaven The original backup string.
 * @return A pointer to the updated backup string, or NULL if no content remains.
 */
char  *ft_shave_backup(char *backup_unshaven)
{
    int i;
    char *backup_shaven;

    i = 0;
    if (backup_unshaven == NULL)
        return (NULL);
    while (backup_unshaven[i] && backup_unshaven[i] != '\n')
        i++;
    if (backup_unshaven[i] == '\0')
    {
        free(backup_unshaven);
        return (NULL);
    }
    backup_shaven = ft_substr(backup_unshaven, (unsigned int)(i + 1), (ft_strlen(backup_unshaven) - i));
    free(backup_unshaven);
    return (backup_shaven);	
}













